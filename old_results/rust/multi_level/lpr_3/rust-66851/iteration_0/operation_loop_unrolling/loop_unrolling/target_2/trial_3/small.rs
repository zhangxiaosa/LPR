use std::convert::TryFrom;\n\nmacro_rules! a {\n    ($b:expr, $c:ident) => {\n        $c::try_from($b).unwrap()\n    };\n}\n\nfn d() -> Option<u64> {\n    const e: i32 = 7;\n    const f: i32 = 1 << 12;\n    const w: usize = f as _;\n    type g = [i32];\n    type h = [bool];\n    type x = [[i32; 2]; 16];\n    enum j {\n        k(u64),\n        l(i32),\n        m,\n    }\n    fn n(aa: i32, o: &x, p: i32, q: i32, ab: i32, ac: &mut h, ad: &mut g) -> j {\n        if ab == aa {\n            let mut ae = String::new();\n            for i in (0..ab).rev() {\n                ae += &ad[1 << i].to_string();\n            }\n            return if let Ok(r) = ae.parse() {\n                j::k(r)\n            } else {\n                j::m\n            };\n        }\n        let mut t = 0;\n        let y = q;\n\n        // Unrolled Loop: for i in 0..ag {\n        let mut u = t;\n\n        // Iteration 0\n        let s = ad[0] + u;\n        if ac[a! {s, usize}] {\n            // Unrolled Loop Body\n            // Break from the loop if the condition is met\n            // Replace `i` with `0` (index of the unrolled iteration)\n            return j::m;\n        }\n        ad[ag + 0] = s;\n        ac[a! {s, usize}] = true;\n        ah += 1;\n\n        // Iteration 1\n        let s = ad[1] + u;\n        if ac[a! {s, usize}] {\n            // Unrolled Loop Body\n            // Break from the loop if the condition is met\n            // Replace `i` with `1` (index of the unrolled iteration)\n            return j::m;\n        }\n        ad[ag + 1] = s;\n        ac[a! {s, usize}] = true;\n        ah += 1;\n\n        // ...unroll remaining iterations...\n\n        if af {\n            let mut z: x = Default::default();\n            z[a! {ab, usize} + 2][0] = std::i32::MAX;\n\n            // ...unroll remaining computations...\n\n            let af = n(aa, &z, p, u, ab + 1, ac, ad);\n            match af {\n                j::k(_) | j::m => return af,\n                j::l(v) => {}\n            }\n        }\n\n        // ...unroll the loop cleanup...\n\n        u += 1;\n        // Unrolled Loop: end\n\n        j::l(p)\n    }\n\n    let mut ac = [false; w];\n    let mut ad = [0i32; 1 << e];\n    let mut o: x = Default::default();\n    o[1][0] = std::i32::MAX;\n\n    match n(e, &o, f, f, 0, &mut ac, &mut ad) {\n        j::k(s) => Some(s),\n        l => None,\n    }\n}\n\nfn main() {\n    assert_eq!(d(), Some(20_313_839_404_245));\n}