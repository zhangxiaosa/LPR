fn main() {\n    const f: i32 = 1 << 12;\n    let mut ac = [false; f as usize];\n    let mut ad_decomposed = [0i32; 1 << 7];\n    let mut o = [[0i32; 2]; 16];\n    o[1][0] = std::i32::MAX;\n    match n(7, &o, f, f, 0, &mut ac, &mut ad_decomposed) {\n        j::k(s) => assert_eq!(Some(s), Some(20_313_839_404_245)),\n        _ => panic!(),\n    }\n}\n\nenum j {\n    k(u64),\n    l(i32),\n    m,\n}\n\nfn n(\n    aa: i32,\n    o: &[[i32; 2]],\n    p: i32,\n    q: i32,\n    ab: i32,\n    ac: &mut [bool],\n    ad_decomposed: &mut [i32],\n) -> j {\n    if ab == aa {\n        let mut ae = String::new();\n        for i in (0..ab).rev() {\n            ae += &ad_decomposed[1 << i].to_string();\n        }\n        return if let Ok(r) = ae.parse() {\n            j::k(r)\n        } else {\n            j::m\n        };\n    }\n    let mut u = t.max(o[2 + 1][1] - o[2 + 1][0]);\n    while u < q {\n        let mut af = true;\n        let mut ah = 0;\n        for i in 0..(1 << ab) {\n            let s = ad_decomposed[i] + u;\n            if ac[s as usize] {\n                af = false;\n                break;\n            }\n            ad_decomposed[(1 << ab) + i] = s;\n            ac[s as usize] = true;\n            ah += 1;\n        }\n        if af {\n            let mut z = [[0i32; 2]; 16];\n            z[ab as usize + 2][0] = std::i32::MAX;\n            for i in 1..ab + 2 {\n                z[i as usize][0] = o[i as usize][0].min(u + o[i as usize - 1][0]);\n                z[i as usize][1] = o[i as usize][1].max(u + o[i as usize - 1][1]);\n            }\n            let af = n(aa, &z, p, u, ab + 1, ac, ad_decomposed);\n            match af {\n                j::k(_) | j::m => return af,\n                j::l(_) => {}\n            }\n        }\n        for i in 0..ah {\n            ac[ad_decomposed[(1 << ab) + i] as usize] = false;\n        }\n        u += 1;\n    }\n    j::l(p)\n}