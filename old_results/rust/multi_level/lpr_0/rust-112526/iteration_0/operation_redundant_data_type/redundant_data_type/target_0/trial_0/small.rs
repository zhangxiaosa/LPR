use std::ptr;\n\nunsafe fn a() -> (*const (*mut i64)) {\n    let mut isize_min;\n    let mut _107 = 0;\n    let mut _31;\n    let mut _33;\n    let mut _177 = ptr::null_mut();\n    let mut _44: (((u64, u64, u8), u32, f32), bool) = Default::default();\n    let mut tup: (((u64, u64, u8), u32, f32), bool) = Default::default();\n    let mut _95 = Default::default();\n    _31 = ptr::addr_of_mut!(_44.0 .2);\n    *_31 = 1;\n    isize_min = std::isize::MIN;\n    'bb65: loop {\n        let tup_ptr = ptr::addr_of_mut!(tup);\n        _31 = ptr::addr_of_mut!((*tup_ptr).0 .0 .2);\n        let _16 = 18215089233857363959;\n        let _90 = _31.wrapping_offset(isize_min);\n        _95.0 = _44;\n        let _46 = 42;\n        let _88 = _16;\n        _31 = _90.wrapping_offset(isize_min);\n        loop {\n            let tup_ptr2 = ptr::addr_of_mut!(tup);\n            *tup_ptr2 = _95;\n            isize_min = _107;\n            let _47 = *_31;\n            match _88 {\n                18215089233857363959 => {\n                    _88 = 0;\n                    let _33 = &mut _46;\n                    match _46 {\n                        42 => {\n                            *_33 = _46;\n                            println!("{}", _47);\n                            return &_177;\n                        }\n                        _ => continue,\n                    }\n                }\n                0 => continue,\n                _ => continue 'bb65,\n            }\n        }\n    }\n}\n\nfn main() {\n    unsafe {\n        a();\n    }\n}