fn main() {
    const d: usize = 4;
    type e = [[i64; d]; d];

    fn f(a: &e, b: &e, n: usize, g: usize, h: usize) -> e {
        let mut l = e::default();

        // Unrolled loop
        for j in 0..(g / 4) {
            let k = j * 4;

            l[0][k % 4] = l[0][k % 4] + p[0][k % 4];
            l[1][k % 4] = l[1][k % 4] + p[1][k % 4];
            l[2][k % 4] = l[2][k % 4] + p[2][k % 4];
            l[3][k % 4] = l[3][k % 4] + p[3][k % 4];

            l[0][(k + 1) % 4] = l[0][(k + 1) % 4] + p[0][(k + 1) % 4];
            l[1][(k + 1) % 4] = l[1][(k + 1) % 4] + p[1][(k + 1) % 4];
            l[2][(k + 1) % 4] = l[2][(k + 1) % 4] + p[2][(k + 1) % 4];
            l[3][(k + 1) % 4] = l[3][(k + 1) % 4] + p[3][(k + 1) % 4];

            l[0][(k + 2) % 4] = l[0][(k + 2) % 4] + p[0][(k + 2) % 4];
            l[1][(k + 2) % 4] = l[1][(k + 2) % 4] + p[1][(k + 2) % 4];
            l[2][(k + 2) % 4] = l[2][(k + 2) % 4] + p[2][(k + 2) % 4];
            l[3][(k + 2) % 4] = l[3][(k + 2) % 4] + p[3][(k + 2) % 4];

            l[0][(k + 3) % 4] = l[0][(k + 3) % 4] + p[0][(k + 3) % 4];
            l[1][(k + 3) % 4] = l[1][(k + 3) % 4] + p[1][(k + 3) % 4];
            l[2][(k + 3) % 4] = l[2][(k + 3) % 4] + p[2][(k + 3) % 4];
            l[3][(k + 3) % 4] = l[3][(k + 3) % 4] + p[3][(k + 3) % 4];
        }

        // Handle remaining iterations if g is not a multiple of 4
        for k in (g - (g % 4))..g {
            l[0][k % 4] = l[0][k % 4] + p[0][k % 4];
            l[1][k % 4] = l[1][k % 4] + p[1][k % 4];
            l[2][k % 4] = l[2][k % 4] + p[2][k % 4];
            l[3][k % 4] = l[3][k % 4] + p[3][k % 4];
        }

        l
    }

    const p: e = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 2, 2, 2]];
    let mut l = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    l = f(&p, &l, d, d, d);
    let q = l;
    println!("{:?}", q);
}