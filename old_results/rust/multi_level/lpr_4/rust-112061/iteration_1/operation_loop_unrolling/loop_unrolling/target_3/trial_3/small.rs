use std::ptr;\n\nunsafe fn b() -> ([u128; 7], *mut i8, *mut bool) {\n    let mut c = false;\n    let mut v8;\n    let mut v9 = 0;\n    let mut v20 = [0; 8];\n    let mut f = (false, 0);\n    let mut v33: ([u128; 7], *mut i8, *mut bool) = ([0; 7], ptr::null_mut(), ptr::null_mut());\n    let mut v39: (usize, [u128; 7], ([u32; 6], usize, *mut u32), [u32; 2]) = (0, [0; 7], ([0; 6], 0, ptr::null_mut()), [0; 2]);\n    let mut ret = ([0; 7], ptr::null_mut(), ptr::null_mut());\n    ret.2 = ptr::addr_of_mut!(c);\n    let mut v20_ptr;\n\n    'l0: loop {\n        v20_ptr = ptr::addr_of_mut!(v20[v9]);\n        v20 = [197_u8; 8];\n        v9 = 2_usize;\n\n        if *v20_ptr == 197 {\n            v8 = 13978819448286864680_u64;\n            v33.2 = ret.2;\n\n            if v39.0 == 0 {\n                'l2: loop {\n                    *v20_ptr = 22;\n\n                    let e = v20;\n                    if v8 == 13978819448286864680 {\n                        v39.2 .0 = [2262110980_u32; 6];\n                        v8 = 13152832795211590855_u64;\n                        v39.0 = 6;\n                        let d = v33.2;\n                        v33.2 = ptr::addr_of_mut!(f.0);\n                        f.1 = *v20_ptr;\n                        *d = true;\n                        v20 = e;\n\n                        if v39.0 == 6 {\n                            println!("{:?}", f);\n                        } else if v39.0 == 0 {\n                            continue 'l2;\n                        } else {\n                            return ret;\n                        }\n                    } else {\n                        continue 'l0;\n                    }\n                }\n            } else {\n                return ret;\n            }\n        } else if *v20_ptr == 4 {\n            v20_ptr = ptr::addr_of_mut!(v20[v9]);\n        } else {\n            return ret;\n        }\n    }\n}\n\nfn main() {\n    unsafe {\n        b();\n    }\n}