use std::ptr;\n\nunsafe fn b() -> ([u128; 7], *mut i8, *mut bool) {\n    let mut c = false;\n    let mut v8 = 13978819448286864680_u64;\n    let mut v9 = 0;\n    let mut v20 = [0; 8];\n    let mut f = (false, 0);\n    let mut v33_0 = [0; 7];\n    let mut v33_1 = ptr::null_mut();\n    let mut v33_2 = ptr::null_mut();\n    let mut v39_0 = 0;\n    let mut v39_1 = [0; 7];\n    let mut v39_2_0 = [0; 6];\n    let mut v39_2_1 = 0;\n    let mut v39_2_2 = ptr::null_mut();\n    let mut v39_3 = [0; 2];\n    let mut ret_0 = [0; 7];\n    let mut ret_1 = ptr::null_mut();\n    let mut ret_2 = ptr::null_mut();\n    ret_2 = ptr::addr_of_mut!(c);\n    let mut v20_ptr;\n    'l0: loop {\n        v20_ptr = ptr::addr_of_mut!(v20[v9]);\n        v20 = [197_u8; 8];\n        v9 = 2_usize;\n        loop {\n            match *v20_ptr {\n                197 => {\n                    v33_2 = ret_2;\n                    match v39_0 {\n                        0 => 'l2: loop {\n                            *v20_ptr = 22;\n                            loop {\n                                let e = v20;\n                                match v8 {\n                                    13978819448286864680 => {\n                                        v39_2_0 = [2262110980_u32; 6];\n                                        v8 = 13152832795211590855_u64;\n                                        v39_0 = 6;\n                                        let d = v33_2;\n                                        v33_2 = ptr::addr_of_mut!(f.0);\n                                        f.1 = *v20_ptr;\n                                        *d = true;\n                                        v20 = e;\n                                        match v39_0 {\n                                            6 => {\n                                                println!(\"{:?}\", f);\n                                            }\n                                            0 => continue 'l2,\n                                            _ => return (ret_0, ret_1, ret_2),\n                                        }\n                                    }\n                                    _ => continue 'l0,\n                                }\n                            }\n                        },\n                        _ => return (ret_0, ret_1, ret_2),\n                    }\n                }\n                4 => {\n                    v20_ptr = ptr::addr_of_mut!(v20[v9]);\n                }\n                _ => return (ret_0, ret_1, ret_2),\n            }\n        }\n    }\n}\n\nfn main() {\n    unsafe {\n        b();\n    }\n}