use primal_sieve::Primes;\n\nfn main() {\n    let mut c = d(1);\n    Primes::all().take_while(|&e| e < 4 as usize).for_each(|e| {\n        c *= d(e as u32).pow_2();\n    });\n    assert_eq!(c.0, 1600);\n}\n\n#[derive(Clone, Copy)]\nstruct d(u32);\n\nimpl d {\n    const G: u32 = 10u32.pow(9);\n\n    fn pow_2(self) -> Self {\n        Self(self.0.pow(2))\n    }\n}\n\nimpl core::ops::MulAssign for d {\n    fn mul_assign(&mut self, h: d) {\n        unsafe {\n            core::arch::asm!(\n                "mul edx",\n                "div {}",\n                in(reg) Self::G,\n                inout("eax") h.0 => _,\n                inout("edx") self.0\n            );\n        }\n    }\n}