use std::ptr;\n   unsafe fn b() -> (*mut i8, *mut bool) {\n       let mut c = false;\n       let mut v8 = 139_788_194_482_868_646_80_u64;\n       let mut v9 = 0;\n       let mut v20_decomposed = [197_u8; 8];\n       let mut f_0 = false;\n       let mut f_1;\n       let mut v33_2_ptr;\n       let mut v39: (usize, [u32; 28], ([u32; 6], usize, *mut u32), [u32; 2]) =\n           (0, [0; 28], ([0; 6], 0, ptr::null_mut()), [0; 2]);\n       let mut v20_decomposed_ptr;\n       let loop_iterations = 1;\n\n       for _ in 0..loop_iterations {\n           v20_decomposed_ptr = ptr::addr_of_mut!(v20_decomposed[v9]);\n           v9 = 2_usize;\n\n           loop {\n               match *v20_decomposed_ptr {\n                   197 => {\n                       v33_2_ptr = ptr::addr_of_mut!(c);\n                       for _ in 0..loop_iterations {\n                           *v20_decomposed_ptr = 22;\n\n                           loop {\n                               let e = v20_decomposed;\n                               match v8 {\n                                   139_788_194_482_868_646_80 => {\n                                       v39.2 .0 = [2_262_110_980_u32; 6];\n                                       v8 = 131_528_327_952_115_908_55_u64;\n                                       v39.0 = 6;\n                                       let d = v33_2_ptr;\n                                       v33_2_ptr = ptr::addr_of_mut!(f_0);\n                                       f_1 = *v20_decomposed_ptr;\n                                       *d = true;\n                                       v20_decomposed = e;\n                                       match v39.0 {\n                                           6 => {\n                                               println!("{:?}", f_1);\n                                           }\n                                           _ => continue,\n                                       }\n                                   }\n                                   _ => break,\n                               }\n                           }\n                       }\n                   }\n                   4 => {\n                       v20_decomposed_ptr = ptr::addr_of_mut!(v20_decomposed[v9]);\n                   }\n                   _ => return (ptr::null_mut(), ptr::null_mut()),\n               }\n           }\n       }\n   }\n   fn main() {\n       unsafe {\n           b();\n       }\n   }