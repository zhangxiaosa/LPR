use std::ops::{Add, MulAssign};\nfn main() {\n    #[derive(Clone, Copy)]\n    struct d(u32);\n    impl Add for d {\n        type Output = d;\n        fn add(mut self, h: d) -> d {\n            self.0 += h.0;\n            self\n        }\n    }\n    impl MulAssign for d {\n        fn mul_assign(&mut self, h: d) {\n            unsafe {\n                core::arch::asm!(\n                    \"mul edx\",\n                    \"div 1000000000\",\n                    in(reg) 1000000000u32,\n                    inout(\"eax\") h.0 => _,\n                    inout(\"edx\") self.0\n                );\n            }\n        }\n    }\n    impl d {\n        fn pow(self, mut exp: u32) -> Self {\n            let mut base = self;\n            base *= base;\n            exp >>= 1;\n            let mut acc = base;\n            exp >>= 1;\n            base *= base;\n            if exp == 1 {\n               acc *= base;\n            }\n            acc\n        }\n    }\n    impl d {\n        const g: u32 = 1000000000;\n    }\n    let mut c = d(1);\n    c *= d::from(1 as u32).pow(2 * (4 / 1 as u32)) + d(1);\n    c *= d::from(2 as u32).pow(2 * (4 / 2 as u32)) + d(1);\n    c *= d::from(3 as u32).pow(2 * (4 / 3 as u32)) + d(1);\n    assert_eq!(c.0, 650);\n}