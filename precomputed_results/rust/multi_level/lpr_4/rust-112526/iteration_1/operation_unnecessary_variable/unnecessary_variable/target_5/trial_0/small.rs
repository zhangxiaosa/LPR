extern crate core;\nuse core::ptr;\nunsafe fn a() -> *const *mut i64 {\n    let mut isize_min;\n    let mut _46;\n    let mut _47;\n    let mut _88;\n    let mut _31;\n    let mut _33;\n    let mut _90;\n    let mut result = ptr::null_mut();\n    let mut tup: (((u64, u64, u8), u32, f32), bool) = Default::default();\n    let mut _95: (((u64, u64, u8), u32, f32), bool) = Default::default();\n    _31 = ptr::addr_of_mut!(tup.0 .0 .2);\n    *_31 = 1;\n    isize_min = isize::MIN;\n    'bb65: loop {\n        _31 = ptr::addr_of_mut!(tup.0 .0 .2);\n        let _ = _31.wrapping_offset(isize::MIN);\n        _95.0 = (\n            (u64::default(), u64::default(), u8::default()),\n            u32::default(),\n            f32::default(),\n        );\n        _46 = 42;\n        _88 = 18215089233857363959_usize;\n        _31 = _31.wrapping_offset(0);\n        loop {\n            tup = _95;\n            isize_min = 0;\n            _47 = *_31;\n            match _88 {\n                18215089233857363959 => {\n                    _88 = 0;\n                    let _ = ptr::addr_of_mut!(_46);\n                    println!("{_31 - 9223372036854775808}");\n                    return ptr::addr_of!(result);\n                }\n                0 => continue,\n                _ => continue 'bb65,\n            }\n        }\n    }\n}\n\nfn main() {\n    unsafe {\n        a();\n    }\n}