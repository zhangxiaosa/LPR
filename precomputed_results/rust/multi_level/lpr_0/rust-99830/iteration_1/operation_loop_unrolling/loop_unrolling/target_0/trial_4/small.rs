use primal_sieve::Primes;\nuse std::ops::{Add, MulAssign};\n\nfn main() {\n    let mut c = d { 0: 1 };\n\n    let e = 2;\n    let pow_result = d { 0: e }.pow(2 * (4 / e)) + d { 0: 1 };\n    c *= pow_result;\n\n    let e = 3;\n    let pow_result = d { 0: e }.pow(2 * (4 / e)) + d { 0: 1 };\n    c *= pow_result;\n\n    assert_eq!(c.0, 650);\n}\n\n#[derive(Clone, Copy)]\nstruct d(u32);\n\nimpl d {\n    const g: u32 = 10u32.pow(9);\n\n    fn pow(self, mut exp: u32) -> Self {\n        let mut base = self;\n        base *= base;\n        exp >>= 1;\n        let mut acc = base;\n        exp >>= 1;\n        base *= base;\n        if exp == 1 {\n            acc *= base;\n        }\n        acc\n    }\n}\n\nimpl Add for d {\n    type Output = d;\n\n    fn add(mut self, other: d) -> d {\n        self.0 += other.0;\n        self\n    }\n}\n\nimpl MulAssign for d {\n    fn mul_assign(&mut self, other: d) {\n        unsafe {\n            core::arch::asm!(\n                "mul edx",\n                "div {:e}",\n                in(reg) Self::g,\n                inout("eax") other.0 => _,\n                inout("edx") self.0\n            );\n        }\n    }\n}