use std\::convert\::TryFrom;\n\nmacro_rules\! a \{\n    (\$b\:expr, \$c\:ident) => \{\n        \$c\::try_from(\$b\).unwrap()\n    \};\n\}\n\nfn d() -> Option<u64> \{\n    const e: i32 = 7;\n    const f: i32 = 1 << 12;\n    const w: usize = f as _;\n    type g = [i32];\n    type x = [[i32; 2]; 16];\n    enum j \{\n        k(u64),\n        l(i32),\n        m,\n    \}\n\n    fn n(aa: i32, o: &x, p: i32, q: i32, ab: i32, ac: &mut [bool], ad: &mut g) -> j \{\n        if ab == aa \{\n            let mut ae = String::new();\n           for i in (0..ab).rev() \{\n                ae += &ad[1 << i].to_string();\n            \}\n            return if let Ok(r) = ae.parse() \{\n                j::k(r)\n            \} else \{\n                j::m\n            \};\n        \}\n\n        let mut t = 0;\n        let y = q;\n\n        // Loop unrolled section for (0..ab).rev()\n        // Unrolled iteration 0\n        t = t.max(o[a! {0, usize} + 1][1] - o[a! {0, usize} + 1][0]);\n\n        // Unrolled iteration 1\n        t = t.max(o[a! {1, usize} + 1][1] - o[a! {1, usize} + 1][0]);\n\n        // Unrolled iteration 2\n        t = t.max(o[a! {2, usize} + 1][1] - o[a! {2, usize} + 1][0]);\n\n        // Replace ab with the actual number of iterations in the unrolled section\n\n        let mut u = t;\n        while u < y \{\n            let mut af = true;\n            let ag = 1 << ab;\n            let mut ah = 0;\n\n            for i in 0..ag \{\n                let s = ad[i] + u;\n                if ac[a! {s, usize}] \{\n                    af = false;\n                    break;\n                \}\n\n                ad[ag + i] = s;\n                ac[a! {s, usize}] = true;\n                ah += 1;\n            \}\n\n            if af \{\n                let mut z: x = Default::default();\n                z[a! {ab, usize} + 2][0] = std::i32::MAX;\n\n                for i in 1..ab + 2 \{\n                    z[a! {i, usize}][0] = o[a! {i, usize}][0].min(u + o[a! {i, usize} - 1][0]);\n                    z[a! {i, usize}][1] = o[a! {i, usize}][1].max(u + o[a! {i, usize} - 1][1]);\n                \}\n\n                let af = n(aa, &z, p, u, ab + 1, ac, ad);\n                match af \{\n                    j::k(_) | j::m => return af,\n                    j::l(v) => \{\}\n                \}\n            \}\n\n            for i in 0..ah \{\n                ac[a! {ad[ag + a!{i, usize}], usize}] = false;\n            \}\n\n            u += 1;\n        \}\n\n        j::l(p)\n    \}\n\n    let mut ac = [false; w];\n    let mut ad = [0i32; 1 << e];\n    let mut o: x = Default::default();\n    o[1][0] = std::i32::MAX;\n\n    match n(e, &o, f, f, 0, &mut ac, &mut ad) \{\n        j::k(s) => Some(s),\n        l => None,\n    \}\n\}

fn main() \{\n    assert_eq!(d(), Some(20_313_839_404_245));\n}