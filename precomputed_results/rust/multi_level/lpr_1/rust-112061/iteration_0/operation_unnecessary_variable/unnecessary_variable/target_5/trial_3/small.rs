use std::ptr;\n\nunsafe fn b() -> ([u128; 7], *mut i8, *mut bool) {\n    let mut c = false;\n    let mut v9 = 0;\n    let mut v12;\n    let mut v20: [u8; 8] = Default::default();\n    let mut e;\n    let mut f: (bool, u8) = Default::default();\n    let mut v39: (usize, [u128; 7], ([u32; 6], usize, *mut u32), [u32; 2]) =\n        (0, [0; 7], ([0; 6], 0, ptr::null_mut()), [0; 2]);\n    let mut ret = ([0; 7], ptr::null_mut(), ptr::null_mut());\n    ret.2 = ptr::addr_of_mut!(c);\n    'l0: loop {\n        v12 = ptr::addr_of_mut!(v20[v9]);\n        v20 = [197_u8; 8];\n        v9 = 2_usize;\n        loop {\n            match *v12 {\n                197 => {\n                    v39 = (v39.0, ret.1, ret.2);\n                    match v39.0 {\n                        0 => 'l2: loop {\n                            *v12 = 22;\n                            loop {\n                                e = v20;\n                                v39.2.0 = [2262110980_u32; 6];\n                                v39.0 = 6;\n                                let d = ret.2;\n                                ret.2 = ptr::addr_of_mut!(f.0);\n                                f.1 = *v12;\n                                *d = true;\n                                v20 = e;\n                                match v39.0 {\n                                    6 => {\n                                        println!(\"{:?}\", f);\n                                    }\n                                    0 => continue 'l2,\n                                    _ => return ret,\n                                }\n                            }\n                        }\n                        _ => return ret,\n                    }\n                }\n                4 => {\n                    v12 = ptr::addr_of_mut!(v20[v9]);\n                }\n                _ => return ret,\n            }\n        }\n    }\n}\n\nfn main() {\n    unsafe {\n        b();\n    }\n}