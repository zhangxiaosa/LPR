use std::convert::TryFrom;\n\nmacro_rules! a {\n\t($b:expr, $c:ident) => {\n\t\t$c::try_from($b).unwrap()\n\t};\n}\n\nfn d() -> Option<u64> {\n\tconst e: i32 = 7;\n\tconst f: i32 = 1 << 12;\n\tconst w: usize = f as _;\n\tenum j {\n\t\tk(u64),\n\t\tl(i32),\n\t\tm,\n\n\t}\n\tfn n(\n\t\taa: i32,\n\t\to: &[[i32; 2]],\n\t\tp: i32,\n\t\tq: i32,\n\t\tab: i32,\n\t\tac_decomposed: &mut [bool],\n\t\tad: &mut [i32],\n\t) -> j {\n\t\tif ab == aa {\n\t\t\tlet mut ae = String::new();\n\t\t\tfor i in (0..ab).rev() {\n\t\t\t\tae += &ad[1 << i].to_string();\n\t\t\t}\n\t\t\treturn if let Ok(r) = ae.parse() {\n\t\t\t\tj::k(r)\n\t\t\t} else {\n\t\t\t\tj::m\n\t\t\t};\n\t\t}\n\t\tlet mut t = 0;\n\t\tlet y = q;\n\t\tfor i in 0..ab {\n\t\t\tt = t.max(o[a! {i, usize} + 1][1] - o[a! {i, usize} + 1][0]);\n\t\t}\n\t\tlet mut u = t;\n\t\twhile u < y {\n\t\t\tlet mut af = true;\n\t\t\tlet ag = 1 << ab;\n\t\t\tlet mut ah = 0;\n\t\t\tfor i in 0..ag {\n\t\t\t\tlet s = ad[i] + u;\n\t\t\t\tif ac_decomposed[a! {s, usize}] {\n\t\t\t\t\taf = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tad[ag + i] = s;\n\t\t\t\tac_decomposed[a! {s, usize}] = true;\n\t\t\t\tah += 1;\n\t\t\t}\n\t\t\tif af {\n\t\t\t\tlet mut z: [[i32; 2]; 16] = Default::default();\n\t\t\t\tz[a! {ab, usize} + 2][0] = std::i32::MAX;\n\t\t\t\tfor i in 1..ab + 2 {\n\t\t\t\t\tz[a! {i, usize}][0] = o[a! {i, usize}][0].min(u + o[a! {i, usize} - 1][0]);\n\t\t\t\t\tz[a! {i, usize}][1] = o[a! {i, usize}][1].max(u + o[a! {i, usize} - 1][1]);\n\t\t\t\t}\n\t\t\t\tlet af = n(aa, &z, p, u, ab + 1, ac_decomposed, ad);\n\t\t\t\tmatch af {\n\t\t\t\t\tj::k(_) | j::m => return af,\n\t\t\t\t\tj::l(v) => {},\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor i in 0..ah {\n\t\t\t\tac_decomposed[a! {ad[ag + a!{i, usize}], usize}] = false;\n\t\t\t}\n\t\t\tu += 1;\n\t\t}\n\t\tj::l(p)\n\t}\n\tlet mut ac_decomposed = [false; w];\n\tlet mut ad = [0i32; 1 << e];\n\tlet mut o: [[i32; 2]; 16] = Default::default();\n\to[1][0] = std::i32::MAX;\n\tmatch n(e, &o, f, f, 0, &mut ac_decomposed, &mut ad) {\n\t\tj::k(s) => Some(s),\n\t\tl => None,\n\t}\n}\n\nfn main() {\n\tassert_eq!(d(), Some(20_313_839_404_245));\n}